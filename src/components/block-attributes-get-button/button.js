/**
 * External dependencies
 */
import { startCase } from 'lodash'
import { applyBlockDesign } from '~stackable/util'

/**
 * WordPress dependencies
 */
import { Fragment } from '@wordpress/element'
import { withSelect, withDispatch } from '@wordpress/data'
import { compose, withState } from '@wordpress/compose'
import { PluginBlockSettingsMenuItem } from '@wordpress/edit-post'
import { Modal } from '@wordpress/components'
import { applyFilters } from '@wordpress/hooks'

const GetBlockAttributesButton = withState( {
	openPopover: false,
	changed: false,
} )( ( {
	blockName,
	openPopover,
	changed,
	setState,
	getJSONBlockAttributes,
	setJSONBlockAttributes,
} ) => {
	return (
		<Fragment>
			<PluginBlockSettingsMenuItem
				icon="editor-code"
				label="Get / Set Block Attributes"
				onClick={ () => {
					setState( { openPopover: true, changed: false } )
					setTimeout( () => document.querySelector( '.ugb-modal-get-block-attributes-button textarea' ).select(), 100 )
				} }
			/>
			{ openPopover &&
				<Modal
					title={ `${ startCase( blockName ) } Block Attributes` }
					focusOnMount={ true }
					className="ugb-modal-get-block-attributes-button"
					onRequestClose={ () => {
						if ( changed ) {
							const value = document.querySelector( '.ugb-modal-get-block-attributes-button textarea' ).value
							setJSONBlockAttributes( value )
						}

						setState( { openPopover: false } )
					 } }
				>
					<p>{ 'Copy or modify the attributes of the block directly. Use only double quotes "' }</p>
					<textarea onChange={ () => setState( { changed: true } ) }>{ getJSONBlockAttributes() }</textarea>
				</Modal>
			}
		</Fragment>
	)
} )

export default compose( [
	withSelect( ( select, { clientId } ) => {
		const { getBlockName } = select( 'core/block-editor' )

		return {
			blockName: clientId && getBlockName( clientId ) ? getBlockName( clientId ).replace( /^\w+\//g, '' ) : '',
			getJSONBlockAttributes: () => {
				const { getBlockName } = select( 'core/block-editor' )
				const { getBlockType } = select( 'core/blocks' )

				if ( ! clientId ) {
					return {}
				}

				const blockAttributes = select( 'core/block-editor' ).getBlockAttributes( clientId )
				const blockName = getBlockName( clientId ).replace( /^\w+\//g, '' )

				// Remove attributes which remain as the default.
				const defaultAttributes = getBlockType( getBlockName( clientId ) ).attributes
				const cleanedAttributes = Object.keys( blockAttributes ).reduce( ( attrs, attrName ) => {
					if ( blockAttributes[ attrName ] !== ( defaultAttributes[ attrName ] ? defaultAttributes[ attrName ].default : '' ) ) {
						attrs[ attrName ] = blockAttributes[ attrName ]
					}
					return attrs
				}, {} )

				// Remove the unique class. Since this is generated by the block.
				cleanedAttributes.uniqueClass = undefined

				// The filter should omit attributes which should not be overridden. For example, text titles.
				return JSON.stringify( applyFilters( `stackable.${ blockName }.design.filtered-block-attributes`, cleanedAttributes ), null, 4 )
			},
		}
	} ),
	withDispatch( ( dispatch, { clientId } ) => {
		return {
			setJSONBlockAttributes: jsonString => {
				if ( ! clientId ) {
					return
				}
				try {
					const attributes = JSON.parse( jsonString )
					applyBlockDesign( attributes, clientId )
				} catch ( err ) {
					console.error( err ) // eslint-disable-line no-console
				}
			},
		}
	} ),
] )( GetBlockAttributesButton )
